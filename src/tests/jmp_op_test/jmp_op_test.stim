@prepare {
# Set HL to adress X"C000"
# LD A, #C0
# LD H, A
3E C0 67
# LD A, #00
# LD L, A
3E 00 6F

# Set BC to adress X"C104"
# LD A, #C1
# LD B, A
3E C1 47
# LD A, #04
# LD C, A
3E 04 4F

# Set DE to adress X"C208"
# LD A, #C2
# LD D, A
3E C2 57
# LD A, #08
# LD E, A
3E 08 5F

# LD A, #03
3E 03

# default data 
#used to simulate interupptvectors
# $00,$08,$10,$18,$20,$28,$30,$38
## ALL OF THEM DO BASICALLY THIS:
# LD A, n (n = last byte of the adress)
# LD (HL), A
# POP DE <- The interupp saved its adress
# INC DE <- we increase the address so we come to the next instruction
# PUSH DE <- We put it back so the RET can be made
# RET
[0000] 3E 00 77 D1 13 D5 C9
[0008] 3E 08 77 D1 13 D5 C9
[0010] 3E 10 77 D1 13 D5 C9
[0018] 3E 18 77 D1 13 D5 C9
[0020] 3E 20 77 D1 13 D5 C9
[0028] 3E 28 77 D1 13 D5 C9
[0030] 3E 30 77 D1 13 D5 C9
[0038] 3E 38 77 D1 13 D5 C9

[0200] 3E 20 77 76 # used so JPs can jump to here
[0250] 3E 25 77 76 # or to here and then (HL) should contain 20 and 25 respectevly 
[C000] FF
[C104] EE
[C208] DD

# adresses up to 1520 should be filled up now
}

### Testing JPs..

# Tests C3
@test { 
# JP nn (nn = 00 02)
C3 00 02
  @check {
    [C000] 20
  }
}

# Tests C3
@test { 
# JP nn (nn = 50 02)
C3 50 02
  @check {
    [C000] 25
  }
}

## To test JP NZ,nn we need to set and reset Z and see that the
## correct jumps are made.
 
# Tests C2
@test { 
# SUB A, A # this should set Z. (Z=1)
# JP NZ, nn (nn = 50 02)
97 C2 50 02
  @check {
    [C000] FF # the jump should not have been done so 
    	      #  nothing is loaded into C000
  }
}

# Tests C2
@test { 
# SUB A, B # this should Reset Z. (Z=0)
# JP NZ, nn (nn = 50 02)
98 C2 50 02
  @check {
    [C000] 25 # jmp was made and 25 should be there.
  }
}

## To test JP Z,nn

# Tests CA
@test { 
# SUB A, A # this should set Z. (Z=1)
# JP Z, nn (nn = 50 02)
97 CA 50 02
  @check {
    [C000] 25  # jmp was made and 25 should be there.
  }
}

# Tests CA
@test { 
# SUB A, B # this should Reset Z. (Z=0)
# JP Z, nn (nn = 50 02)
98 CA 50 02
  @check {
    [C000] FF # the jump should not have been done so 
    	      #  nothing is loaded into C000
  }
}

## To test JP NC,nn

# Tests D2
@test { 
# LD A, #FF
# ADD A, A # this should set C. (C=1)
# JP NC, nn (nn = 50 02)
3E FF 87 D2 50 02
  @check {
    [C000] FF # the jump should not have been done so 
    	      #  nothing is loaded into C000
  }
}

# Tests D2
@test { 
# ADD A, A # this should Reset C. (C=0)
# JP NC, nn (nn = 50 02)
87 D2 50 02
  @check {
    [C000] 25  # jmp was made and 25 should be there.
  }
}

## To test JP C,nn

# Tests DA
@test { 
# LD A, #FF
# ADD A, A # this should set C. (C=1)
# JP C, nn (nn = 50 02)
3E FF 87 DA 50 02
  @check {
    [C000] 25  # jmp was made and 25 should be there.
  }
}

# Tests DA
@test { 
# ADD A, A # this should Reset C. (C=0)
# JP C, nn (nn = 50 02)
87 DA 50 02
  @check {
    [C000] FF # the jump should not have been done so 
    	      #  nothing is loaded into C000
  }
}



### Testing relative jumps

# Tests 18
@test { 
# JR n (n = 02)
# LD A, #AB
# LD (HL), A # JMP DIRECTLY HERE!
18 02 3E AB 77
  @check {
    [C000] 03
  }

}

# Tests 28
@test { 
# SUB A, A # this should set Z. (Z=1)
# JR Z, n (n = 02)
# LD A, #BA
# LD (HL), A
97 28 02 3E BA 77
  @check {
    [C000] 00
  }
}

# Tests 28
@test { 
# SUB A, B # this should Reset Z. (Z=0)
# JR Z, n (n = 02)
# LD A, #BA
# LD (HL), A
90 28 02 3E BA 77
  @check {
    [C000] BA
  }
}


# Tests 20
@test { 
# SUB A, A # this should set Z. (Z=1)
# JR NZ, n (n = 02)
# LD A, #BA
# LD (HL), A
97 20 02 3E BA 77
  @check {
    [C000] BA
  }
}

# Tests 20
@test { 
# SUB A, B # this should Reset Z. (Z=0)
# JR NZ, n (n = 02)
# LD A, #BA
# LD (HL), A
90 20 02 3E BA 77
  @check {
    [C000] 42
  }
}


# Tests 38
@test { 
# LD A, #FF
# ADD A, A # this should set C. (C=1)
# JR C, n (n = 02)
# LD A, #BA
# LD (HL), A
3E FF 87 38 02 3E BA 77
  @check {
    [C000] FE
  }
}

# Tests 38
@test { 
# ADD A, A # this should Reset C. (C=0)
# JR C, n (n = 02)
# LD A, #BA
# LD (HL), A
87 38 02 3E BA 77
  @check {
    [C000] BA
  }
}


# Tests 30
@test { 
# LD A, #FF
# ADD A, A # this should set C. (C=1)
# JR NC, n (n = 02)
# LD A, #BA
# LD (HL), A
3E FF 87 30 02 3E BA 77
  @check {
    [C000] BA
  }
}

# Tests 30
@test { 
# ADD A, A # this should Reset C. (C=0)
# JR NC, n (n = 02)
# LD A, #BA
# LD (HL), A
87 30 02 3E BA 77
  @check {
    [C000] 06
  }
}

# Tests E9
@test { 
# LD HL, nn (nn = 00 C2)
# JP (HL)
# LD (HL), A
21 00 C2 59 77
  @check {
    [C200] 20
  }
}

### Testing the RSTs


# Tests C7
@test { 
# RST 0x00
# LD A, #DD
# LD (BC), A
C7 35 DD 02
  @check {
    [C000] 00
    [C104] DD
  }
}

# Tests D7
@test { 
# RST 0x10
# LD A, #DD
# LD (BC), A
D7 35 DD 02
  @check {
    [C000] 10
    [C104] DD
  }
}

# Tests DF
@test { 
# RST 0x18
# LD A, #DD
# LD (BC), A
DF 35 DD 02
  @check {
    [C000] 18
    [C104] DD
  }
}

# Tests E7
@test { 
# RST 0x20
# LD A, #DD
# LD (BC), A
E7 35 DD 02
  @check {
    [C000] 20
    [C104] DD
  }
}

# Tests EF
@test { 
# RST 0x28
# LD A, #DD
# LD (BC), A
EF 35 DD 02
  @check {
    [C000] 28
    [C104] DD
  }
}

# Tests F7
@test { 
# RST 0x30
# LD A, #DD
# LD (BC), A
F7 35 DD 02
  @check {
    [C000] 30
    [C104] DD
  }
}

# Tests FF
@test { 
# RST 0x38
# LD A, #DD
# LD (BC), A
FF 35 DD 02
  @check {
    [C000] 38
    [C104] DD
  }
}
