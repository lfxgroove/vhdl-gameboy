@prepare {
# Set HL to adress X"C000"
# LD A, #C0
# LD H, A
3E C0 67
# LD A, #00
# LD L, A
3E 00 6F

# Set BC to adress X"C104"
# LD A, #C1
# LD B, A
3E C1 47
# LD A, #04
# LD C, A
3E 04 4F

# Set DE to adress X"C208"
# LD A, #C2
# LD D, A
3E C2 57
# LD A, #08
# LD E, A
3E 08 5F

# LD A, #03
3E 03

# default data 
[C000] FF AA
## OBS REMEMBER THAT THIS MUST NOT BE TOO LONG AS TO GO INTO C208 SPACE
[C200] 3E 20 77 76
[C104] EE
[C208] DD
## Used for testing calls
[C210] 3E EE C9

## All registers now have unique values.
## This makes it possible for tests to be short as operations
## like:
# LD A, B
# LD (HL), A
# now we know that if (HL) = C000 contains the value of B, that is "C1", then
# the test came out positive. Else something went wrong.
}

# Testing the setup done by prepare
# Test number: 1
@test { 
  @check {
    [C000] FF
    [C104] EE
    [C208] DD
  }
}

# Testing the setup done by prepare
# Test number: 2
@test { 
# LD (HL), A
# LD (BC), A
# LD (DE), A
77 02 12
  @check {
    [C000] 03
    [C104] 03
    [C208] 03
  }
}

## Testing PUSH and POP

# Tests C1,D5
# Test number: 3
@test {
# PUSH DE - C2 08 to the stack
# POP BC  - C2 08
# LD (HL), B - C2
# LD A, C
# LD (DE), A - 08
D5 C1 70 79 12
  @check {
    [C000] C2
    [C208] 08
  }
}


# Tests E5
# Test number: 4
@test {
# PUSH HL - C0 00 to the stack
# POP BC  - C0 00
# LD (HL), B - C0
# LD A, C
# LD (DE), A - 00
E5 C1 70 79 12
  @check {
    [C000] C0
    [C208] 00
  }
}


# Tests D1
# Test number: 5
@test {
# PUSH HL - C0 00 to the stack
# POP DE  - C0 00
# LD (HL), D - C0
# LD A, E
# LD (BC), A - 00
E5 D1 72 7B 02
  @check {
    [C000] C0
    [C104] 00
  }
}

# Tests C5
# Test number: 6
@test {
# PUSH BC - C1 04 to the stack
# POP DE  - C1 04
# LD (HL), D - C1
# LD A, E
# LD (DE), A - 04
C5 D1 72 7B 12
  @check {
    [C000] C1
    [C104] 04
  }
}

# Tests E1
# Test number: 7
@test {
# PUSH BC - C1 04 to the stack
# POP HL  - C1 04
# LD A, H
# LD (BC), A - C1
# LD A, L
# LD (DE), A - 04
C5 E1 7C 02 7D 12 
  @check {
    [C104] C1
    [C208] 04
  }
}

# Tests E1
# Test number: 8
@test {
# PUSH BC - C1 04 to the stack
# POP HL  - C1 04
# LD A, H
# LD (BC), A - C1
# LD A, L
# LD (DE), A - 04
C5 E1 7C 02 7D 12 
  @check {
    [C104] C1
    [C208] 04
  }
}

# Tests C9
# Test number: 9
@test {
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET
21 00 C2 E5 C9
  @check {
    [C200] 20
  }
}

# Tests C0
# Test number: 10
@test {
# ADD A, B - resets Z (Z=0)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET NZ
# LD (HL), A
80 21 00 C2 E5 C0 77
  @check {
    [C200] 20
  }
}

# Tests C0
# Test number: 11
@test {
# SUB A, A - Sets Z (Z=1)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET NZ - Sould not jump
# LD (HL), A
97 21 00 C2 E5 C0 77
  @check {
    [C200] 00
  }
}


# Tests C8
# Test number: 12
@test {
# ADD A, B - resets Z (Z=0)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET Z - Should not jump.
# LD (HL), A
80 21 00 C2 E5 C8 77
  @check {
    [C200] C4
  }
}

# Tests C8
# Test number: 13
@test {
# SUB A, A - Sets Z (Z=1)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET Z
# LD (HL), A
97 21 00 C2 E5 C8 77
  @check {
    [C200] 20
  }
}

# Tests D0
# Test number: 14
@test {
# LD A, #FF
# ADD A, B - Sets C (C=1)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET NC
# LD (HL), A
3E FF 80 21 00 C2 E5 D0 77
  @check {
    [C200] C0
  }
}

# Tests D0
# Test number: 15
@test {
# ADD A, B - Resets C (C=0)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET NC
# LD (HL), A
80 21 00 C2 E5 D0 77
  @check {
    [C200] 20
  }
}


# Tests D8
# Test number: 16
@test {
# LD A, #FF
# ADD A, B - Sets C (C=1)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET C
# LD (HL), A
3E FF 80 21 00 C2 E5 D8 77
  @check {
    [C200] 20
  }
}

# Tests D8
# Test number: 17
@test {
# ADD A, B - Resets C (C=0)
# LD HL , nn (nn = 00 C2)
# PUSH HL - C2 00 to the stack
# RET C
# LD (HL), A
80 21 00 C2 E5 D8 77
  @check {
    [C200] C4
  }
}

### Testing calls


# Tests CD
# Test number: 18
@test {
# CALL nn (nn = 10 C2) # At address C210 there is: LD A, #EE, RET
# LD (HL), A
CD 10 C2 77
  @check {
    [C000] EE
  }
}

# Tests C4
# Test number: 19
@test {
# ADD A, B - resets Z (Z=0)
# CALL NZ, nn (nn = 10 C2)
# LD (HL), A
80 C4 10 C2 77
  @check {
    [C000] EE
  }
}

# Tests C4
# Test number: 20
@test {
# SUB A, A - Sets Z (Z=1)
# CALL NZ, nn (nn = 10 C2)
# LD (HL), A
97 C4 10 C2 77
  @check {
    [C000] 00
  }
}

# Tests CC
# Test number: 21
@test {
# ADD A, B - resets Z (Z=0)
# CALL NZ, nn (nn = 10 C2)
# LD (HL), A
80 CC 10 C2 77
  @check {
    [C000] C4
  }
}

# Tests CC
# Test number: 22
@test {
# SUB A, A - Sets Z (Z=1)
# CALL NZ, nn (nn = 10 C2)
# LD (HL), A
97 CC 10 C2 77
  @check {
    [C000] EE
  }
}

# Tests D4
# Test number: 23
@test {
# ADD A, B - resets C (C=0)
# CALL NC, nn (nn = 10 C2)
# LD (HL), A
80 D4 10 C2 77
  @check {
    [C000] EE
  }
}

# Tests D4
# Test number: 24
@test {
# LD A, #FF
# ADD A, B - Sets C (C=1)
# CALL NC, nn (nn = 10 C2)
# LD (HL), A
3E FF 80 D4 10 C2 77
  @check {
    [C000] C0
  }
}

# Tests DC
# Test number: 25
@test {
# ADD A, B - resets C (C=0)
# CALL C, nn (nn = 10 C2)
# LD (HL), A
80 DC 10 C2 77
  @check {
    [C000] C4
  }
}

# Tests DC
# Test number: 26
@test {
# LD A, #FF
# ADD A, B - Sets C (C=1)
# CALL C, nn (nn = 10 C2)
# LD (HL), A
3E FF 80 DC 10 C2 77
  @check {
    [C000] EE
  }
}

### POP AND PUSH ON AF

# Tests F5
# Test number: 27
@test {
# ADD A, A #Sets all flags to 0 (no Carry/halfCarry, not Z, not a subtraction)
# LD A, #FFZ
# PUSH AF <- AF = FF00
# POP BC <- B = FF, C = 00
# LD A, B
# LD (HL), A
# LD A, C
# LD (DE), A
87 3E FF F5 C1 78 77 79 12
  @check {
    [C000] FF
    [C208] 00
  }
}

# Tests F5
# Test number: 28
@test {
# SUB A, A # sets F = C0
# LD A, #FF
# PUSH AF <- AF = FFC0
# POP BC <- B = FF, C = C0
# LD A, B
# LD (HL), A
# LD A, C  
# LD (DE), A
97 3E FF F5 C1 78 77 79 12
  @check {
    [C000] FF
    [C208] C0
  }
}

# Tests F1
# Test number: 29
@test {
# LD BC,nn (nn = C100)
# PUSH BC
# POP AF <- AF = C100
# LD (HL), A
# Moved the JP Z since ADC affects the flags and set the zero flag, which made the jump
# even if the test was OK
# JP Z, nn (nn = 00 C2) <- Should NOT do this jump - if it does it ruins the check.
# LD A, #00
# ADC A, A # 00+00+CARRY(=0) = 0
# LD (DE), A
01 00 C1 C5 F1 77 CA 00 C2 3E 00 8F 12
  @check {
    [C000] C1
    [C208] 00
  }
}


# Tests F1, F5
# Test number: 30
@test {
# PUSH BC
# POP AF
# PUSH AF
# POP DE
# LD A, #03
# LD (DE), A
# BELOW IS JUST FOR DEBUGGING
# LD A, D
# LD (BC), A
# LD A, E
# LD (HL), A
C5 F1 F5 D1 3E 03 12 # DEBUGGING   7A 12 7B 77
  @check {
# REAL TEST.
    [C104] 03 # - adress c104 since bc->af->e
# BELOW IS JUST DEBUGING
#   [C104] C1 # adress c104 since bc->af->e
#   [C000] 04 # adress c104 since bc->af->e
  }
}

### NOP test

# Tests DC
# Test number: 31
@test {
# LD A, #10
# NOP
# NOP
# NOP
# NOP
# LD (HL), A
3E 10 00 00 00 00 77
  @check {
    [C000] 10
  }
}


### Tests how the push pushes 16-bitvalues on the stack.
# Example text from a z80 instruction manual.
# http://www.phy.davidson.edu/fachome/dmb/py310/Z80.Instruction%20set.pdf
# Page 117
#This instruction first
#decrements SP and loads the high order byte of IX to the memory address 
#specified by SP; then decrements SP again and loads the low order byte to 
#the memory location corresponding to this new address in SP.

#If the AF register pair contains 2233H and the Stack Pointer contains 
#1007H, at instruction PUSH AF memory address 1006H contains 22H, 
#memory address 1005H contains 33H, and the Stack Pointer contains 
#1005H.

# Tests PUSH HL just to se where stuff ends upp
# Test number: 32
@test {
# LD SP, nn (nn = 00 E0)
# LD HL,  nn (nn = BB AA)
# PUSH HL
# LD A, H
# LD (DE), A
# LD A, L
# LD (BC), A
31 00 E0 21 BB AA E5 7C 12 7D 02
  @check {
#   [E000] # SP should be decremeted before something is pushed onto it.
    [DFFF] AA  # Higest bits should be pushed first
    [DFFE] BB  # Lowest bits should be pushed second
    [C208] AA  # H = AA
    [C104] BB  # L = BB
  }
}
