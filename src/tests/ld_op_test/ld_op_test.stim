# Copyright (c) 2013, Filip Strömbäck, Anton Sundblad, Alex Telon
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * The names of the contributors may not be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL FILIP STRÖMBÄCK, ANTON SUNDBLAD OR ALEX TELON 
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@prepare {
# Set HL to adress X"C000"
# LD A, #C0
# LD H, A
3E C0 67
# LD A, #00
# LD L, A
3E 00 6F

# Set BC to adress X"C104"
# LD A, #C1
# LD B, A
3E C1 47
# LD A, #04
# LD C, A
3E 04 4F

# Set DE to adress X"C208"
# LD A, #C2
# LD D, A
3E C2 57
# LD A, #08
# LD E, A
3E 08 5F

# LD A, #03
3E 03

# default data 
[C000] FF AA
[C104] EE
[C208] DD
[FF80] A0 A1 A2 A3 A4 A5

## All registers now have unique values.
## This makes it possible for tests to be short as operations
## like:
# LD A, B
# LD (HL), A
# now we know that if (HL) = C000 contains the value of B, that is "C1", then
# the test came out positive. Else something went wrong.
}

# Testing the setup done by prepare
# Test number: 1
@test { 
  @check {
    [C000] FF
    [C104] EE
    [C208] DD
    [FF80] A0 A1 A2 A3 A4 A5
  }
}

# Testing the setup done by prepare
# Test number: 2
@test { 
# LD (HL), A
# LD (BC), A
# LD (DE), A
77 02 12
  @check {
    [C000] 03
    [C104] 03
    [C208] 03
  }
}

### Testing LD X, A
### Testing LD (HL), X

# Tests 77,3E
# 3E is tested implicitly.
# Test number: 3
@test { 
# LD (HL), A
77
  @check {
    [C000] 03
  }
}

# Tests 47,70
# Test number: 4
@test {
# LD B, A
# LD (HL), B
47 70
  @check {
    [C000] 03
  }
}
  
# Tests 4F,71
# Test number: 5
@test {
# LD C, A
# LD (HL), C
4F 71
  @check {
    [C000] 03
  }
}

# Tests 57,72 - KOLLA HÄR SEN
# Test number: 6
@test {
# LD D, A
# LD (HL), D
57 72
  @check {
    [C000] 03
  }
}

# Tests 5F,73
# Test number: 7
@test {
# LD E, A
# LD (HL), E
5F 73
   @check {
   [C000] 03
   }
}

# Tests 67,7C,02
# Test number: 8
@test {
# LD H, A	- store 03 in H
# LD A, #FF	- "destroy" A
# LD A, H	- restore 03 to A
# LD (BC), A	- (HL) = (BC) = C000
67 3E FF 7C 02
   @check {
   [C104] 03
   }
}

# Tests 6F
# Test number: 9
@test {
# LD L, A	- store 03 in L
# LD A, #FF	- "destroy" A
# LD A, L	- restore 03 to A
# LD (BC), A	
6F 3E FF 7D 02
   @check {
   [C104] 03
   }
}

# Tests 74
# Test number: 10
@test {
# LD (HL), H	
74
   @check {
   [C000] C0
   }
}

# Tests 75
# Test number: 11
@test {
# LD (HL), L	
75
   @check {
   [C000] 00
   }
}


# Tests 36
# Test number: 12
@test {
# LD (HL), n	
36 E4
   @check {
   [C000] E4
   }
}

### Testing LD X, B

# Tests 40
# Test number: 13
@test {
# LD B, B
# LD (HL), B
40 70
  @check {
    [C000] C1
  }
}

# Tests 48
# Test number: 14
@test {
# LD C, B
# LD (HL), C
48 71
  @check {
    [C000] C1
  }
}

# Tests 50
# Test number: 15
@test {
# LD D, B
# LD (HL), D
50 72
  @check {
    [C000] C1
  }
}

# Tests 58
# Test number: 16
@test {
# LD E, B
# LD (HL), E
58 73
  @check {
    [C000] C1
  }
}


# Tests 60
# Test number: 17
@test {
# LD A, #C0
# LD B, A
# LD H, B
# LD (HL), H
3E C0 47 60 74
  @check {
    [C000] C0
  }
}


# Tests 68
# Test number: 18
@test {
# LD A, #00
# LD B, A
# LD L, B
# LD (HL), L
3E 00 47 68 75
  @check {
    [C000] 00
  }
}


### Testing LD X, C

# Tests 41
# Test number: 19
@test {
# LD B, C
# LD (HL), B
41 70
  @check {
    [C000] 04
  }
}
  
# Tests 49
# Test number: 20
@test {
# LD C, C
# LD (HL), C
49 71
  @check {
    [C000] 04
  }
}

# Tests 51
# Test number: 21
@test {
# LD D, C
# LD (HL), D
51 72
  @check {
    [C000] 04
  }
}

# Tests 59
# Test number: 22
@test {
# LD E, C
# LD (HL), E
59 73
  @check {
    [C000] 04
  }
}

# Tests 61
# Test number: 23
@test {
## C is 04..
# LD H, C
# LD A, H
# LD (BC), A
61 7C 02
  @check {
    [C104] 04
  }
}


# Tests 69
# Test number: 24
@test {
## C is 04..
# LD L, C
# LD A, L
# LD (BC), A
69 7D 02
  @check {
    [C104] 04
  }
}

# Tests 7F
# Test number: 25
@test {
# LD A, A
# LD (HL), A
7F 77
  @check {
    [C000] 03
  }
}


### Testing LD X, D

# Tests 42
# Test number: 26
@test {
# LD B, D
# LD (HL), B
42 70
  @check {
    [C000] C2
  }
}
  
# Tests 4A
# Test number: 27
@test {
# LD C, D
# LD (HL), C
4A 71
  @check {
    [C000] C2
  }
}

# Tests 52
# Test number: 28
@test {
# LD D, D
# LD (HL), D
52 72
  @check {
    [C000] C2
  }
}

# Tests 5A
# Test number: 29
@test {
# LD E, D
# LD (HL), E
5A 73
  @check {
    [C000] C2
  }
}


# Tests 62
# Test number: 30
@test {
# LD A, #CO
# LD D, A
# LD H, D
# LD (HL), H
3E C0 57 62 74
  @check {
    [C000] C0
  }
}


# Tests 6A
# Test number: 31
@test {
# LD A, #00
# LD D, A
# LD L, D
# LD (HL), L
3E 00 57 6A 75
  @check {
    [C000] 00
  }
}


### Testing LD X, E

# Tests 43
# Test number: 32
@test {
# LD B, E
# LD (HL), B
43 70
  @check {
    [C000] 08
  }
}
  
# Tests 4B
# Test number: 33
@test {
# LD C, E
# LD (HL), C
4B 71
  @check {
    [C000] 08
  }
}

# Tests 53
# Test number: 34
@test {
# LD D, E
# LD (HL), D
53 72
  @check {
    [C000] 08
  }
}

# Tests 5B
# Test number: 35
@test {
# LD E, E
# LD (HL), E
5B 73
  @check {
    [C000] 08
  }
}


# Tests 63
# Test number: 36
@test {
# LD A, #C1
# LD E, A
# LD H, E
# LD (HL), H
3E C1 5F 63 74
  @check {
    [C100] C1
  }
}


# Tests 6B
# Test number: 37
@test {
# LD A, #00
# LD E, A
# LD L, E
# LD (HL), L
3E 00 5F 6B 75
  @check {
    [C000] 00
  }
}


### Testing LD X, H

# Tests 44
# Test number: 38
@test {
# LD B, H
# LD (HL), B
44 70
  @check {
    [C000] C0
  }
}
  
# Tests 4C
# Test number: 39
@test {
# LD C, H
# LD (HL), C
4C 71
  @check {
    [C000] C0
  }
}

# Tests 54
# Test number: 40
@test {
# LD D, H
# LD (HL), D
54 72
  @check {
    [C000] C0
  }
}

# Tests 5C
# Test number: 41
@test {
# LD E, H
# LD (HL), E
5C 73
  @check {
    [C000] C0
  }
}


# Tests 64
# Test number: 42
@test {
# LD H, H
# LD (HL), H
64 74
  @check {
    [C000] C0
  }
}


# Tests 6C 
# Test number: 43
@test {
# LD L, H
# LD (HL), L
6C 75
  @check {
    [C0C0] C0
  }
}



### Testing LD X, L

# Tests 45
# Test number: 44
@test {
# LD B, L
# LD (HL), B
45 70
  @check {
    [C000] 00
  }
}
  
# Tests 4D
# Test number: 45
@test {
# LD C, L
# LD (HL), C
4D 71
  @check {
    [C000] 00
  }
}

# Tests 55
# Test number: 46
@test {
# LD D, L
# LD (HL), D
55 72
  @check {
    [C000] 00
  }
}

# Tests 5D
# Test number: 47
@test {
# LD E, L
# LD (HL), E
5D 73
  @check {
    [C000] 00
  }
}


# Tests 65
# Test number: 48
@test {
# LD H, L
# LD A, H
# LD (BC), A
65 7C 02
  @check {
    [C104] 00
  }
}

# Tests 6D
# Test number: 49
@test {
# LD L, L
# LD (HL), L
6D 75
  @check {
    [C000] 00
  }
}


### Testing LD X, (HL)

# Tests 7E
# Test number: 50
@test {
# LD A, (HL) - (HL) contains FF
# LD (BC), A
7E 02
  @check {
    [C104] FF 
  }
}

# Tests 46,12
# Test number: 51
@test {
# LD B, (HL)
# LD A, B
# LD (DE), A
46 78 12
  @check {
    [C208] FF 
  }
}


# Tests 4E
# Test number: 52
@test {
# LD C, (HL)
# LD A, C
# LD (DE), A
4E 79 12
  @check {
    [C208] FF 
  }
}


# Tests 56
# Test number: 53
@test {
# LD D, (HL)
# LD A, D
# LD (BC), A
56 7A 02
  @check {
    [C104] FF 
  }
}

# Tests 5E
# Test number: 54
@test {
# LD E, (HL)
# LD A, E
# LD (BC), A
5E 7B 02
  @check {
    [C104] FF 
  }
}

# Tests 66
# Test number: 55
@test {
# LD H, (HL)
# LD A, H
# LD (BC), A
66 7C 02
  @check {
    [C104] FF 
  }
}

# Tests 6E
# Test number: 56
@test {
# LD L, (HL)
# LD A, L
# LD (BC), A
6E 7D 02
  @check {
    [C104] FF 
  }
}

### Testing LD A, (C/D/E)

# Tests 79
# Test number: 57
@test {
# LD A, C
# LD (HL), A
79 77
  @check {
    [C000] 04
  }
}


# Tests 7A
# Test number: 58
@test {
# LD A, D
# LD (HL), A
7A 77
  @check {
    [C000] C2
  }
}


# Tests 7B
# Test number: 59
@test {
# LD A, E
# LD (HL), A
7B 77
  @check {
    [C000] 08
  }
}


#### Testing LDs with OP codes between 01-3a
## nn = two byte immediate value. (LS byte first.)
## so if nn=01 then that really is 10

# Tests 01
# Test number: 60
@test {
# LD BC, #C208
# LD (BC), A
01 08 C2 02
  @check {
    [C208] 03
  }
}

# Tests 0A
# Test number: 61
@test {
# LD A, (BC)
# LD (HL), A
0A 77
  @check {
    [C000] EE
  }
}

# Tests 1A
# Test number: 62
@test {
# LD A, (DE)
# LD (HL), A
1A 77
  @check {
    [C000] DD
  }
}


# Tests 2A
# Test number: 63
@test {
# LD A, (HL+) # A = FF, HL = C001
# LD (HL), A
2A 77
  @check {
    [C001] FF
  }
}


# Tests 22
# Test number: 64
@test {
# LD (HL+), A
# LD (HL), A
22 77
  @check {
    [C000] 03
    [C001] 03
  }
}

# Tests 3A
# Test number: 65
@test {
# LD A, #01 # HL = C001
# LD L, A
# LD A, (HL-) # A = AA, HL = C000
# LD (HL), A
3E 01 6F 3A 77
  @check {
    [C000] AA
  }
}


# Tests 32
# Test number: 66
@test {
# LD (HL-), A
32
  @check {
    [C000] 03
  }
}



### Testing stuff with nn...

# Tests 01
# Test number: 67
@test {
# LD BC,nn (nn=04C1)
# LD (BC), A
01 04 C1 02
  @check {
    [C104] 03
  }
}

# Tests 01
# Test number: 68
@test {
# LD BC, nn (nn=00C0)
# LD (BC), A
01 00 C0 02
  @check {
    [C000] 03
  }
}

# Tests 11
# Test number: 69
@test {
# LD DE, nn (nn=00C0)
# LD (DE), A
11 00 C0 12
  @check {
    [C000] 03
  }
}

# Tests 21
# Test number: 70
@test {
# LD HL, nn (nn=00C0)
# LD (HL), A
21 00 C0 77
  @check {
    [C000] 03
  }
}


# Tests EA
# Test number: 71
@test {
# LD nn, A (nn=00C0)
# LD nn, A (nn=30C1)
EA 00 C0
EA 30 C1
  @check {
    [C000] 03
    [C130] 03
  }
}


# Tests FA
# Test number: 72
@test {
# LD A, (nn) (nn=00C0)
# LD (BC), A
FA 00 C0 02
  @check {
    [C104] FF
  }
}

## Testing stuff with SP


# Tests 31,08
# Test number: 73
@test {
# LD SP, nn (nn=3412)
# LD (nn), SP (nn=00C1)
31 34 12 08 00 C1 
  @check {
    [C100] 34 12
  }
}


# Tests F9
# Test number: 74
@test {
# LD SP, HL (C000)
# LD (nn), SP (nn=00C1)
F9 08 00 C1 
  @check {
    [C100] 00 C0
  }
}


# Tests F8 CALC: SP+n=ABCD+02=ABCF
# Test number: 75
@test {
# LD SP, nn (nn=CDAB)
# LD HL, SP+n (n=02)
# LD SP, HL -- added since the result in HL was previously ignored, causing the test to fail
# LD (nn), SP (nn=00C1)
31 CD AB F8 02 F9 08 00 C1 
  @check {
    [C100] CF AB
  }
}


## Testing LDs with weird X"FF00" values and stuff
# [FF00] A0 A1 A2 A3 A4 A5
## OBS values have to be between FF80-FFFD

# Tests F0 CALC: FF00+81=FF81 -> (FF81) = A1
# Test number: 76
@test {
# LD A, ($FF00+n)
# LD (HL), A
F0 81 77
  @check {
    [C000] A1
  }
}

# Tests F2 CALC: 04+FF00=FF04 -> (FF84) = A4
# Test number: 77
@test {
# LD A, #84
# LD C, A
# LD A, (C+$FF00)
# LD (HL), A
3E 84 4F F2 77
  @check {
    [C000] A4
  }
}

# Tests E0 
# Test number: 78
@test {
# LD (n+$FF00), A
E0 80 
  @check {
    [FF80] 03
  }
}

# Tests E2
# Test number: 79
@test {
# LD C, n (n=80)
# LD (C+$FF00), A
0E 80 E2
  @check {
    [FF80] 03
  }
}



### Testing LD X, n

# Tests 06
# Test number: 80
@test {
# LD B, n (n = 10)
# LD A, B
# LD (HL), A
06 10 78 77
   @check {
   [C000] 10
   }
}

# Tests 0E
# Test number: 81
@test {
# LD C, n
# LD A, C
# LD (HL), A
0E 10 79 77
   @check {
   [C000] 10
   }
}

# Tests 16
# Test number: 82
@test {
# LD D, n
# LD A, D
# LD (HL), A
16 10 7A 77
   @check {
   [C000] 10
   }
}

# Tests 1E
# Test number: 83
@test {
# LD E, n
# LD A, E
# LD (HL), A
1E 10 7B 77
   @check {
   [C000] 10
   }
}

# Tests 26
# Test number: 84
@test {
# LD H, n
# LD A, H
# LD (BC), A
26 10 7C 02
   @check {
   [C104] 10
   }
}

# Tests 2E
# Test number: 85
@test {
# LD L, n
# LD A, L
# LD (BC), A
2E 10 7D 02
   @check {
   [C104] 10
   }
}


### Testing CCF, SCF and stuff


# Tests 3F 
# Test number: 86
@test { 
# ADD A, B - see to that carry = 0
# LD A, #03
# CCF
# ADC A, B - 03+C1+(carry = 1) = C5
# LD (HL), A
80 3E 03 3F 88 77
  @check {
    [C000] C5
  }
}

# Tests 3F
# Test number: 87
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03
# CCF
# ADC A, B - 03+C1+(carry = 0) = C4 
# LD (HL), A
3E FF 80 3E 03 3F 88 77
  @check {
    [C000] C4
  }
}


# Tests 37
# Test number: 88
@test { 
# SCF
# ADC A, B - 03+C1+(carry = 1) = C5
# LD (HL), A
37 88 77
  @check {
    [C000] C5
  }
}

# Tests 37
# Test number: 89
@test { 
# ADD A, B - 03+C1 will make carry = 0
# LD A, #03
# SCF # sets carry to 1
# ADC A, B - 03+C1+(carry = 1) = C5
# LD (HL), A
80 3E 03 37 88 77
  @check {
    [C000] C5
  }
}
