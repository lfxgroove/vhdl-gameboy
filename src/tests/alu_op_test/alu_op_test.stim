@prepare {
# Set HL to adress X"C000"
# LD A, #C0
# LD H, A
3E C0 67
# LD A, #00
# LD L, A
3E 00 6F

# Set BC to adress X"C104"
# LD A, #C1
# LD B, A
3E C1 47
# LD A, #04
# LD C, A
3E 04 4F

# Set DE to adress X"C208"
# LD A, #C2
# LD D, A
3E C2 57
# LD A, #08
# LD E, A
3E 02 5F

# LD A, #03
3E 03

# default data 
[C200] 35 20 FF 77 76 # if a jump is made to here write 20 to (HL) and HALT.
[C000] FF
[C104] EE
[C208] DD

}


### Testing ADD A, n
# Add n to A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Set if carry from bit 3.
# C - Set if carry from bit 7.

# Tests 80 - CALC: 0A+01 
@test { 
# LD A, #01
# LD B, A
# LD A, #0A
# ADD A, B
# LD (HL), A
3E 01 47 3E 0A 80 77
  @check {
    [C000] 0B
  }
}

# Tests 81 - CALC: 80+00
@test { 
# LD A, #80
# LD C, A
# LD A, #00
# ADD A, C
# LD (HL), A
3E 80 4F 3E 00 81 77
  @check {
    [C000] 80
  }
}


# Tests 82 - CALC: FF+01=00 THIS IS CORRECT RIGHT? 
@test { 
# LD A, #FF
# LD D, A
# LD A, #01
# ADD A, D
# LD (HL), A
3E FF 57 3E 01 82 77
  @check {
    [C000] 00
  }
}

# Tests 83 - CALC: 0A+01 
@test { 
# LD A, #01
# LD E, A
# LD A, #0A
# ADD A, E
# LD (HL), A
3E 01 5F 3E 0A 83 77
  @check {
    [C000] 0B
  }
}

# Tests 84 - CALC: 0A+01 
@test { 
# LD A, #01
# LD H, A
# LD A, #0A
# ADD A, H
# LD (BC), A
3E 01 67 3E 0A 84 02
  @check {
    [C104] 0B
  }
}

# Tests 85 - CALC: 0A+01 
@test { 
# LD A, #01
# LD L, A
# LD A, #0A
# ADD A, L
# LD (BC), A
3E 01 6F 3E 0A 85 02
  @check {
    [C104] 0B
  }
}


# Tests 86 - CALC: 01+01 
@test { 
# LD A, #01
# LD (HL), A
# ADD A, (HL) # 1+1
# LD (BC), A
3E 01 77 86 02
  @check {
    [C104] 02
  }
}

# Tests 87 - CALC: 02+02 
@test { 
# LD A, #02
# ADD A, A # 2+2
# LD (HL), A
3E 02 87 77
  @check {
    [C000] 04
  }
}

# Tests C6 - CALC: 03+0F=12 
@test { 
# ADD A, #0F
# LD (HL), A
C6 0F 77
  @check {
    [C000] 12
  }
}


### Testing ADC A, n
# Add n + Carry flag to A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Set if carry from bit 3.
# C - Set if carry from bit 7.


# Tests 88 - CALC: 03+C1+(carry = 0) = C4 
@test { 
# ADD A, B - see to that carry = 0
# LD A, #03 - restore A to a low value 03
# ADC A, B
# LD (HL), A
80 3E 03 88 77
  @check {
    [C000] C4
  }
}

# Tests 88 - CALC: 03+C1+(carry = 1) = C5
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, B
# LD (HL), A
3E FF 80 3E 03 88 77
  @check {
    [C000] C5
  }
}


# Tests 88 - CALC: 03+C1+(carry = 1) = C5 
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, B
# LD (HL), A
3E FF 80 3E 03 88 77
  @check {
    [C000] C5
  }
}


# Tests 88 - CALC: FF+C1+(carry = 1) = C1 
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #FF - restore A to a high value FF
# ADC A, B
# LD (HL), A
3E FF 80 3E FF 88 77
  @check {
    [C000] C1
  }
}


# Tests 88 - CALC: FF+C1+(carry = 0) = C0 
@test { 
# ADD A, B - 03+C1 will make carry = 0
# LD A, #FF - restore A to a high value FF
# ADC A, B
# LD (HL), A
80 3E FF 88 77
  @check {
    [C000] C0
  }
}

## tests for 88 were more in detail, 89-8F are going to be simpler


# Tests 89 - CALC: 03+04+(carry = 1) = 08
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, C
# LD (HL), A
3E FF 80 3E 03 89 77
  @check {
    [C000] 08
  }
}


# Tests 8A - CALC: 03+C2+(carry = 1) = C6
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, D
# LD (HL), A
3E FF 80 3E 03 8A 77
  @check {
    [C000] C6
  }
}


# Tests 8B - CALC: 03+08+(carry = 1) = 0C
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, E
# LD (HL), A
3E FF 80 3E 03 8B 77
  @check {
    [C000] 0C
  }
}


# Tests 8C - CALC: 03+C0+(carry = 1) = C4
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, H
# LD (HL), A
3E FF 80 3E 03 8C 77
  @check {
    [C000] C4
  }
}

# Tests 8D - CALC: 03+00+(carry = 1) = 04
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, L
# LD (HL), A
3E FF 80 3E 03 8D 77
  @check {
    [C000] 04
  }
}


# Tests 8E - CALC: 03+FF+(carry = 1) = 03
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, (HL)
# LD (HL), A
3E FF 80 3E 03 8E 77
  @check {
    [C000] 03
  }
}


# Tests 8F - CALC: 03+03+(carry = 1) = 07
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, A
# LD (HL), A
3E FF 80 3E 03 8F 77
  @check {
    [C000] 07
  }
}


# Tests CE - CALC: 03+01+(carry = 1) = 05
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #03 - restore A to a low value 03
# ADC A, #01
# LD (HL), A
3E FF 80 3E 03 CE 01 77
  @check {
    [C000] 05
  }
}

# Tests CE - CALC: 3C+FF+(carry = 1) = 3C
@test { 
# LD A, #FF
# ADD A, B - FF+C1 will make carry = 1
# LD A, #3C - set A to given value
# ADC A, #FF
# LD (HL), A
3E FF 80 3E 3C CE FF 77
  @check {
    [C000] 3C
  }
}


### Testing SUB A, n
# Subtract n from A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Set if no borrow from bit 4.
# C - Set if no borrow.


# Tests 90 - CALC: C5-C1 = 04
@test { 
# LD A, #C5
# SUB A, B
# LD (HL), A
C5 90 77
  @check {
    [C000] 04
  }
}

# Tests 91 - CALC: C5-04 = C1
@test { 
# LD A, #C5
# SUB A, C
# LD (HL), A
C5 91 77
  @check {
    [C000] C1
  }
}

# Tests 92 - CALC: C5-C2 = 03
@test { 
# LD A, #C5
# SUB A, D
# LD (HL), A
C5 92 77
  @check {
    [C000] 03
  }
}

# Tests 93 - CALC: C5-08 = BD
@test { 
# LD A, #C5
# SUB A, E
# LD (HL), A
C5 93 77
  @check {
    [C000] BD
  }
}

# Tests 94 - CALC: C5-C0 = 05
@test { 
# LD A, #C5
# SUB A, H
# LD (HL), A
C5 94 77
  @check {
    [C000] 05
  }
}

# Tests 95 - CALC: C5-00 = C5
@test { 
# LD A, #C5
# SUB A, L
# LD (HL), A
C5 95 77
  @check {
    [C000] C5
  }
}

# Tests 96 - CALC: C5-FF = C6
@test { 
# LD A, #C5
# SUB A, (HL)
# LD (HL), A
C5 96 77
  @check {
    [C000] C6
  }
}

# Tests 97 - CALC: 03-03 = 00
@test { 
# SUB A, A
# LD (HL), A
97 77
  @check {
    [C000] 00
  }
}


# Tests D6 - CALC: 03-CE = 35
@test { 
# SUB A, #CE
# LD (HL), A
D6 CE 77
  @check {
    [C000] 35
  }
}


### Testing SUB A, n
# Subtract n + Carry flag from A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Set if no borrow from bit 4.
# C - Set if no borrow.


# Tests 98 - CALC: C5-C1+(carry=0) = 04
@test { 
# ADD A, B - see to that carry = 0
# LD A, #C5
# SBC A, B
# LD (HL), A
80 3E C5 98 77
  @check {
    [C000] 04
  }
}


# Tests 98 - CALC: C5-C1+(carry=1) = 05
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5 - restore A
# SBC A, B
# LD (HL), A
3E FF 80 3E C5 98 77
  @check {
    [C000] 05
  }
}

## 99-9F are tested in less detail 

# Tests 99 - CALC: C5-04+(carry=1) = C2
@test {
# LD A, #FF
# ADD A, B - see to that carry = 1 
# LD A, #C5
# SBC A, C
# LD (HL), A
3E FF 80 3E C5 99 77
  @check {
    [C000] C2
  }
}

# Tests 9A - CALC: C5-C2+(carry=1) = 04
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5
# SBC A, D
# LD (HL), A
3E FF 80 3E C5 9A 77
  @check {
    [C000] 04
  }
}

# Tests 9B - CALC: C5-08+(carry=1) = BE
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5
# SBC A, E
# LD (HL), A
3E FF 80 3E C5 9B 77
  @check {
    [C000] BE
  }
}

# Tests 9C - CALC: C5-C0+(carry=1) = 06
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5
# SBC A, H
# LD (HL), A
3E FF 80 3E C5 9C 77
  @check {
    [C000] 06
  }
}

# Tests 9D - CALC: C5-00+(carry=1) = C6
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5
# SBC A, L
# LD (HL), A
3E FF 80 3E C5 9D 77
  @check {
    [C000] C6
  }
}

# Tests 9E - CALC: C5-FF+(carry=1) = C7
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# LD A, #C5
# SBC A, (HL)
# LD (HL), A
3E FF 80 3E C5 9E 77
  @check {
    [C000] C7
  }
}

# Tests 9F - CALC: 03-03+(carry=1) = 01
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# SBC A, A
# LD (HL), A
3E FF 80 9F 77
  @check {
    [C000] 01
  }
}


# Tests D6 - CALC: 03-CE+(carry=1) = 36
@test { 
# LD A, #FF
# ADD A, B - see to that carry = 1
# SBC A, #CE
# LD (HL), A
3E FF 80 D6 CE 77
  @check {
    [C000] 36
  }
}

### Testing ADD HL, X
##

# Tests 09 - CALC: 0001+C104 = C105
@test { 
# LD HL, nn (nn = 01 00) 
# ADD HL, BC
# LD (HL), A
21 01 00 09 77
  @check {
    [C105] 03
  }
}

# Tests 19 - CALC: 0001+C208 = C209
@test { 
# LD HL, nn (nn = 01 00) 
# ADD HL, DE
# LD (HL), A
21 01 00 19 77
  @check {
    [C209] 03
  }
}


# Tests 29 - CALC: E080+E080 = C100
@test { 
# LD HL, nn (nn = 80 EO) 
# ADD HL, HL
# LD (HL), A
21 80 E0 29 77
  @check {
    [C100] 03
  }
}

# Tests 39 - CALC: 0000+C100 = C101
@test { 
# LD HL, nn (nn = 01 00)
# LD SP, nn (nn = OO C1)
# ADD HL, SP
# LD (HL), A
21 01 00 31 00 C1 39 77
  @check {
    [C101] 03
  }
}


# Tests E8 - CALC: C100+0008 = C108
@test { 
# LD SP, nn (nn = OO C1)
# ADD SP, n (n = 08)
# LD (HL), A
31 00 E8 08 77
  @check {
    [C108] 03
  }
}




### Testing CP A, n
#Compare A with n. This is basically an A - n
#subtraction instruction but the results are thrown
#away.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero. (SET if A = n)
# N - set.
# H - Set if no borrow from bit 4.
# C - Set if no borrow. (set if A < n)


# Tests B7,B8,B9,BA,BB,BC,BD,BE,BF
@test { 
# CP A, B
# CP A, C
# CP A, D
# CP A, E
# CP A, H
# CP A, L
# CP A, (HL)
# CP A, A
# LD (HL), A
B7 B8 B9 BA BB BC BD BE BF 77
  @check {
    [C000] 03
  }
}

### Testing AND A, n
# Logically AND n with A, result in A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Set.
# C - Reset.


# Tests A0 - CALC: 03 & FF = 03
@test { 
# LD A, #FF
# LD B, A
# LD A, #03
# AND A, B
# LD (HL), A
3E FF 47 3E 03 80 A0 77
  @check {
    [C000] 03
  }
}

# Tests A0 - CALC: 03 & 00 = 00
@test { 
# LD A, #00
# LD B, A
# LD A, #03
# AND A, B
# LD (HL), A
3E 00 47 3E 03 80 A0 77
  @check {
    [C000] 00
  }
}

# Tests A0 - CALC: FF & FF = FF
@test { 
# LD A, #FF
# LD B, A
# AND A, B
# LD (HL), A
3E FF 47 80 A0 77
  @check {
    [C000] FF
  }
}


# Tests A0 - CALC: FA & 84 = 80
@test { 
# LD A, #FA
# LD B, A
# LD A, #84
# AND A, B
# LD (HL), A
3E FA 47 3E 84 80 A0 77
  @check {
    [C000] 80
  }
}
 
## A0 was tested in more detail than A1-A7


# Tests A1 - CALC: 03 & 04 = 00
@test { 
# AND A, C
# LD (HL), A
A1 77
  @check {
    [C000] 00
  }
}

# Tests A2 - CALC: 03 & C2 = 02
@test { 
# AND A, D
# LD (HL), A
A2 77
  @check {
    [C000] 02
  }
}

# Tests A3 - CALC: 03 & 08 = 00
@test { 
# AND A, E
# LD (HL), A
A3 77
  @check {
    [C000] 00
  }
}

# Tests A4 - CALC: 03 & C0 = 00
@test { 
# AND A, H
# LD (HL), A
A4 77
  @check {
    [C000] 00
  }
}

# Tests A5 - CALC: 03 & 01 = 01
@test { 
# AND A, L
# LD (HL), A
A5 77
  @check {
    [C000] 01
  }
}


# Tests A6 - CALC: 03 & FF = 03
@test { 
# AND A, (HL)
# LD (HL), A
A6 77
  @check {
    [C000] 03
  }
}

# Tests A7 - CALC: 03 & 03 = 03
@test { 
# AND A, A
# LD (HL), A
A7 77
  @check {
    [C000] 03
  }
}

### Testing OR A, n
# Logical OR n with register A, result in A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Reset.
# C - Reset.


# Tests B0 - CALC: 03 OR C1 = C3
@test { 
# OR A, B
# LD (HL), A
B0 77
  @check {
    [C000] C3
  }
}

# Tests B0 - CALC: 83 OR FF = FF
@test { 
# LD A, #FF
# LD B, A
# LD A, #83
# OR A, B
# LD (HL), A
3E FF 47 3E 83 B0 77
  @check {
    [C000] 7C
  }
}


# Tests B0 - CALC: 0F OR F0 = FF
@test { 
# LD A, #0F
# LD B, A
# LD A, #F0
# OR A, B
# LD (HL), A
3E 0F 47 3E F0 B0 77
  @check {
    [C000] FF
  }
}

# Tests B0 - CALC: 00 OR 00 = 00
@test { 
# LD A, #00
# LD B, A
# OR A, B
# LD (HL), A
3E 00 47 B0 77
  @check {
    [C000] 00
  }
}

## less tested B1-B7


# Tests B1 - CALC: 03 OR 04 = 07
@test { 
# OR A, C
# LD (HL), A
B1 77
  @check {
    [C000] 07
  }
}

# Tests B2 - CALC: 03 OR C2 = C3
@test { 
# OR A, D
# LD (HL), A
B2 77
  @check {
    [C000] C3
  }
}

# Tests B3 - CALC: 03 OR 08 = 0B
@test { 
# OR A, E
# LD (HL), A
B3 77
  @check {
    [C000] 0B
  }
}

# Tests B4 - CALC: 03 OR C0 = C3
@test { 
# OR A, H
# LD (HL), A
B4 77
  @check {
    [C000] C3
  }
}

# Tests B5 - CALC: 03 OR 00 = 03
@test { 
# OR A, L
# LD (HL), A
B5 77
  @check {
    [C000] 03
  }
}

# Tests B6 - CALC: 03 OR FF = FF
@test { 
# OR A, (HL)
# LD (HL), A
B6 77
  @check {
    [C000] FF
  }
}

# Tests B7 - CALC: 03 OR 03 = 03
@test { 
# OR A, A
# LD (HL), A
B7 77
  @check {
    [C000] 03
  }
}

### Testing XOR A, n
# Logical exclusive OR n with register A, result in A.
## n = A,B,C,D,E,H,L,(HL),#
# Flags affected:
# Z - Set if result is zero.
# N - Reset.
# H - Reset.
# C - Reset.


# Tests A8 - CALC: 03 xor C1 = C2
@test { 
# XOR A, B
# LD (HL), A
A8 77
  @check {
    [C000] C2
  }
}

# Tests A8 - CALC: 83 xor FF = 7C
@test { 
# LD A, #FF
# LD B, A
# LD A, #83
# XOR A, B
# LD (HL), A
3E FF 47 3E 83 A8 77
  @check {
    [C000] 7C
  }
}


# Tests A8 - CALC: 0F xor F0 = FF
@test { 
# LD A, #0F
# LD B, A
# LD A, #F0
# XOR A, B
# LD (HL), A
3E 0F 47 3E F0 A8 77
  @check {
    [C000] FF
  }
}

# Tests A8 - CALC: 00 xor 00 = 00
@test { 
# LD A, #00
# LD B, A
# XOR A, B
# LD (HL), A
3E 00 47 A8 77
  @check {
    [C000] 00
  }
}

# Tests A8 - CALC: DE xor C7 = 19
@test { 
# LD A, #DE
# LD B, A
# LD A, #C7
# XOR A, B
# LD (HL), A
3E DE 47 3E C7 A8 77
  @check {
    [C000] 19
  }
}


## less tested A9-AF

# Tests A9 - CALC: DC xor 04 = D8
@test { 
# LD A, #DC
# XOR A, C
# LD (HL), A
3E DC A9 77
  @check {
    [C000] D8
  }
}

# Tests AA - CALC: DC xor C2 = 1E
@test { 
# LD A, #DC
# XOR A, D
# LD (HL), A
3E DC AA 77
  @check {
    [C000] 1E
  }
}

# Tests AB - CALC: DC xor 08 = D4
@test { 
# LD A, #DC
# XOR A, E
# LD (HL), A
3E DC AB 77
  @check {
    [C000] D4
  }
}

# Tests AC - CALC: DC xor C0 = 1C
@test { 
# LD A, #DC
# XOR A, H
# LD (HL), A
3E DC AC 77
  @check {
    [C000] 1C
  }
}

# Tests AD - CALC: DC xor 00 = DC
@test { 
# LD A, #DC
# XOR A, L
# LD (HL), A
3E DC AD 77
  @check {
    [C000] DC
  }
}

# Tests AE - CALC: DC xor FF = 23
@test { 
# LD A, #DC
# XOR A, (HL)
# LD (HL), A
3E DC AE 77
  @check {
    [C000] FF
  }
}


# Tests AF - CALC: DC xor DC = 00
@test { 
# LD A, #DC
# XOR A, A
# LD (HL), A
3E DC AF 77
  @check {
    [C000] 00
  }
}

## Testing all INC and DEC commands
### Testing XOR A, n
# Increment/decrement register n.


# Tests 03
@test { 
# INC BC
# LD (BC), A
03 02
  @check {
    [C105] 03
  }
}

# Tests 04
@test { 
# INC B
# LD (BC), A
04 02
  @check {
    [C204] 03
  }
}

# Tests 05
@test { 
# DEC B
# LD (BC), A
05 02
  @check {
    [C004] 03
  }
}

# Tests 0B
@test { 
# DEC BC
# LD (BC), A
0B 02
  @check {
    [C103] 03
  }
}

# Tests 0C
@test { 
# INC C
# LD (BC), A
0C 02
  @check {
    [C105] 03
  }
}

# Tests 0D
@test { 
# DEC C
# LD (BC), A
0D 02
  @check {
    [C103] 03
  }
}

# Tests 13
@test { 
# INC DE
# LD (DE), A
13 12
  @check {
    [C209] 03
  }
}

# Tests 14
@test { 
# INC D
# LD (DE), A
14 12
  @check {
    [C308] 03
  }
}

# Tests 15
@test { 
# DEC D
# LD (DE), A
15 12
  @check {
    [C108] 03
  }
}

# Tests 1B
@test { 
# DEC DE
# LD (DE), A
1B 12
  @check {
    [C207] 03
  }
}

# Tests 1C
@test { 
# INC E
# LD (DE), A
1C 12
  @check {
    [C309] 03
  }
}

# Tests 1D
@test { 
# DEC E
# LD (DE), A
1D 12
  @check {
    [C307] 03
  }
}

# Tests 23
@test { 
# INC HL
# LD (HL), A
23 77
  @check {
    [C001] 03
  }
}

# Tests 24
@test { 
# INC H
# LD (HL), A
24 77
  @check {
    [C100] 03
  }
}

# Tests 25
@test {
# LD A, #C5
# LD H, A 
# DEC H
# LD (HL), A
3E C5 67 25 77
  @check {
    [C400] 03
  }
}

# Tests 2B
@test {
# LD A, #C5
# LD H, A 
# DEC HL
# LD (HL), A
3E C5 67 2B 77
  @check {
    [C4FF] 03
  }
}

# Tests 2C
@test { 
# INC L
# LD (HL), A
2C 77
  @check {
    [C001] 03
  }
}

l# Tests 2D
@test {
# LD A, #03
# LD L, A 
# DEC L
# LD (HL), A
3E C5 6F 2D 77
  @check {
    [C002] 03
  }
}

# Tests 33
@test {
# LD SP, nn (nn = 04C1)
# INC SP
# LD (nn), SP
31 04 C1 33 08 00 C0
  @check {
    [C000] C1 05
  }
}

# Tests 34
@test {
# INC (HL)
34
  @check {
    [C000] 00
  }
}

# Tests 35
@test {
# DEC (HL)
35
  @check {
    [C000] FE
  }
}

# Tests 3B
@test {
# LD SP, nn (nn = 04C1)
# DEC SP
# LD (nn), P
31 04 C1 3B 08 00 C0
  @check {
    [C000] C1 03
  }
}

# Tests 3C
@test {
# INC A
# LD (HL), A
3C 77
  @check {
    [C000] 04
  }
}

# Tests 3D
@test {
# DEC A
# LD (HL), A
3D 77
  @check {
    [C000] 02
  }
}


### Rotations

# Tests 07
@test {
# RLCA
# LD (HL), A
07 77
  @check {
    [C000] 06
  }
}

# Tests 07
@test {
# LD A, #00
# LD B, A
# LD A, #80
# RLCA
# ADC A,B - 01+00+carry(=1) = 02
# LD (HL), A
3E 00 47 3E 80 07 88 77
  @check {
    [C000] 02
  }
}

# Tests 0F
@test {
# LD A, #00
# LD B, A
# LD A, #81
# RRCA
# ADC A,B - 40+00+carry(=1) = C2
# LD (HL), A
3E 00 47 3E 81 0F 88 77
  @check {
    [C000] 
  }
}

# Tests 17
@test {
# LD A, #81
# RLA
# LD (HL), A
3E 81 17 77
  @check {
    [C000] 03
  }
}


# Tests 1F 
@test {
# LD A, #81
# RRA
# LD (HL), A
3E 81 1F 77
  @check {
    [C000] C0
  }
}

# Tests CB00 
@test {
# LD A, #81
# LD B, A
# LD A, #00
# RLC B
# ADC A, B - 00+03+carry(=1) = 03 # tests if carry is set
# LD (HL), A
3E 81 47 3E 00 CB 00 88 77
  @check {
    [C000] 03
  }
}


# Tests CB00 
@test {
# LD A, #01
# LD B, A
# LD A, #00
# RLC B
# ADC A, B - 00+02+carry(=0) = 02 # tests if carry is Reset
# LD (HL), A
3E 01 47 3E 00 CB 00 88 77
  @check {
    [C000] 02
  }
}


# Tests CB01
@test {
# LD A, #81
# LD C, A
# LD A, #00
# RLC C
# ADC A, C - 00+03+carry(=1) = 04 # tests if carry is set
# LD (HL), A
3E 81 4F 3E 00 CB 01 89 77
  @check {
    [C000] 04
  }
}

# Tests CB01
@test {
# LD A, #01
# LD C, A
# LD A, #00
# RLC C
# ADC A, C - 00+02+carry(=0) = 02 # tests if carry is set
# LD (HL), A
3E 01 4F 3E 00 CB 01 89 77
  @check {
    [C000] 02
  }
}


# Tests CB02
@test {
# LD A, #81
# LD D, A
# LD A, #00
# RLC D
# ADC A, D - 00+03+carry(=1) = 04 # tests if carry is set
# LD (HL), A
3E 81 57 3E 00 CB 02 8A 77
  @check {
    [C000] 04
  }
}

# Tests CB02
@test {
# LD A, #01
# LD D, A
# LD A, #00
# RLC D
# ADC A, D - 00+02+carry(=0) = 02 # tests if carry is set
# LD (HL), A
3E 01 57 3E 00 CB 02 8A 77
  @check {
    [C000] 02
  }
}


# Tests CB03
@test {
# LD A, #81
# LD E, A
# LD A, #00
# RLC E
# ADC A, E - 00+02+carry(=1) = 03 # tests if carry is set
# LD (HL), A
3E 81 5F 3E 00 CB 03 8B 77
  @check {
    [C000] 03
  }
}

# Tests CB03
@test {
# LD A, #01
# LD E, A
# LD A, #00
# RLC E
# ADC A, E - 00+03+carry(=0) = 03 # tests if carry is set
# LD (HL), A
3E 01 5F 3E 00 CB 03 8B 77
  @check {
    [C000] 03
  }
}


# Tests CB04
@test {
# LD A, #81
# LD H, A
# LD A, #00
# RLC H
# ADC A, H - 00+03+carry(=1) = 04 # tests if carry is set
# LD (BC), A
3E 81 67 3E 00 CB 04 8C 02
  @check {
    [C104] 04
  }
}

# Tests CB04
@test {
# LD A, #01
# LD H, A
# LD A, #00
# RLC H
# ADC A, H - 00+02+carry(=0) = 02 # tests if carry is set
# LD (BC), A
3E 01 67 3E 00 CB 04 8C 02
  @check {
    [C104] 02
  }
}


# Tests CB05
@test {
# LD A, #81
# LD L, A
# LD A, #00
# RLC L
# ADC A, L - 00+03+carry(=1) = 04 # tests if carry is set
# LD (BC), A
3E 81 6F 3E 00 CB 05 8D 02
  @check {
    [C104] 04
  }
}

# Tests CB05
@test {
# LD A, #01
# LD L, A
# LD A, #00
# RLC L
# ADC A, L - 00+02+carry(=0) = 02 # tests if carry is set
# LD (BC), A
3E 01 6F 3E 00 CB 05 8D 02
  @check {
    [C104] 02
  }
}

# Tests CB06
@test {
# A, #00
# LD B, A
# LD (HL), n (n = 83)
# RLC (HL)
# ADC A, B - 00+00+carry(=1) = 01 # tests if carry is set
# LD (BC), A
3E 00 47 36 83 CB 06 8D 02
  @check {
    [C000] 07
    [C104] 01
  }
}

# Tests CB07
@test {
# LD A, #00
# LD B, A
# LD A, #80
# RLC A
# ADC A,B - 01+00+carry(=1) = 02
# LD (HL), A
3E 00 47 3E 80 CB 07 88 77
  @check {
    [C000] 02
  }
}

###Testing RRC OPs
##

# Tests CB08
@test {
# LD A, #81
# LD B, A	 
# LD A, #00
# RRC B
# ADC A, B - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (HL), A
3E 81 47 3E 00 CB 08 88 77
  @check {
    [C000] C1
  }
}

# Tests CB08
@test {
# LD A, #80
# LD B, A	 
# LD A, #00
# RRC B
# ADC A, B - 00+40+carry(=0) = 40
# LD (HL), A
3E 80 47 3E 00 CB 08 88 77
  @check {
    [C000] 40
  }
}


# Tests CB09
@test {
# LD A, #81
# LD C, A
# LD A, #00
# RRC C
# ADC A, C - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (HL), A
3E 81 4F 3E 00 CB 09 89 77
  @check {
    [C000] C1
  }
}

# Tests CB09
@test {
# LD A, #80
# LD C, A	 
# LD A, #00
# RRC C
# ADC A, C - 00+40+carry(=0) = 40
# LD (HL), A
3E 80 4F 3E 00 CB 09 89 77
  @check {
    [C000] 40
  }
}

# Tests CB0A
@test {
# LD A, #81
# LD D, A
# LD A, #00
# RRC D
# ADC A, D - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (HL), A
3E 81 57 3E 00 CB 0A 8A 77
  @check {
    [C000] C1
  }
}

# Tests CB0A
@test {
# LD A, #80
# LD D, A	 
# LD A, #00
# RRC D
# ADC A, D - 00+40+carry(=0) = 40
# LD (HL), A
3E 80 57 3E 00 CB 0A 8A 77
  @check {
    [C000] 40
  }
}


# Tests CB0B
@test {
# LD A, #81
# LD E, A
# LD A, #00
# RRC E
# ADC A, E - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (BC), A
3E 81 5F 3E 00 CB 0B 8B 02
  @check {
    [C104] C1
  }
}

# Tests CB0B
@test {
# LD A, #80
# LD E, A	 
# LD A, #00
# RRC E
# ADC A, E - 00+40+carry(=0) = 40
# LD (BC), A
3E 80 5F 3E 00 CB 0B 8B 02
  @check {
    [C104] 40
  }
}


# Tests CB0C
@test {
# LD A, #81
# LD H, A
# LD A, #00
# RRC H
# ADC A, H - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (BC), A
3E 81 67 3E 00 CB 0C 8C 02
  @check {
    [C104] C1
  }
}

# Tests CB0C
@test {
# LD A, #80
# LD H, A	 
# LD A, #00
# RRC H
# ADC A, H - 00+40+carry(=0) = 40
# LD (BC), A
3E 80 67 3E 00 CB 0C 8C 02
  @check {
    [C104] 40
  }
}


# Tests CB0D
@test {
# LD A, #81
# LD L, A
# LD A, #00
# RRC L
# ADC A, L - 00+C0+carry(=1) = C1 # tests if carry is set
# LD (BC), A
3E 81 6F 3E 00 CB 0D 8D 02
  @check {
    [C104] C1
  }
}

# Tests CB0D
@test {
# LD A, #80
# LD L, A	 
# LD A, #00
# RRC L
# ADC A, L - 00+40+carry(=0) = 40
# LD (BC), A
3E 80 5F 3E 00 CB 0D 8D 02
  @check {
    [C104] 40
  }
}

# Tests CB0E
@test {
# LD (HL), n (n = CD)
# RRC (HL)
# LD A, (HL)
# ADC A, B - E6+C1+carry(=1) = A8 # tests if carry is set
# LD (BC), A
36 CD CB 0E 7E 87 02
  @check {
    [C104] A8
  }
}

# Tests CB0E
@test {
# LD (HL), n (n = 80)
# RRC (HL) # 80 BLIR 40
# LD A, (HL)
# ADC A, B - 40+C1+carry(=0) = 01 # tests if carry is set
# LD (BC), A
36 80 CB 0E 7E 87 02
  @check {
    [C104] 01
  }
}


# Tests CB0F
@test {
# RRC A
# ADC A, A - 81+81+carry(=1) = 03 # tests if carry is set
# LD (HL), A
CB 0F 8F 77
  @check {
    [C000] 03
  }
}

# Tests CB0F
@test {
# LD A, #80
# RRC A
# ADC A, A - 40+40+carry(=0) = 80
# LD (HL), A
3E 80 CB 0F 8F 77
  @check {
    [C000] 80
  }
}

### Testing RL n

# Tests CB11
@test {
# LD A, #82
# LD C, A
# RL C
# LD (HL), A
3E 82 4F CB 11 77
  @check {
    [C000] 04
  }
}


# Tests CB11
@test {
# LD A, #82
# LD C, A
# RL C 
# RL C # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 82 4F CB 11 CB 11 77
  @check {
    [C000] 09
  }
}

# Tests CB12
@test {
# LD A, #82
# LD D, A
# RL D
# LD (HL), A
3E 82 57 CB 12 77
  @check {
    [C000] 04
  }
}


# Tests CB12
@test {
# LD A, #82
# LD D, A
# RL D 
# RL D # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 82 57 CB 12 CB 12 77
  @check {
    [C000] 09
  }
}

# Tests CB13
@test {
# LD A, #82
# LD E, A
# RL E
# LD (HL), A
3E 82 5F CB 13 77
  @check {
    [C000] 04
  }
}


# Tests CB13
@test {
# LD A, #82
# LD E, A
# RL E 
# RL E # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 82 5F CB 13 CB 13 77
  @check {
    [C000] 09
  }
}

# Tests CB14
@test {
# LD A, #82
# LD H, A
# RL H
# LD (BC), A
3E 82 67 CB 14 02
  @check {
    [C104] 04
  }
}


# Tests CB14
@test {
# LD A, #82
# LD H, A
# RL H 
# RL H # to see if a 1 pops back in from the right again.
# LD (BC), A
3E 82 67 CB 14 CB 14 02
  @check {
    [C104] 09
  }
}

# Tests CB15
@test {
# LD A, #82
# LD L, A
# RL L
# LD (BC), A
3E 82 6F CB 15 02
  @check {
    [C104] 04
  }
}


# Tests CB15
@test {
# LD A, #82
# LD L, A
# RL L 
# RL L # to see if a 1 pops back in from the right again.
# LD (BC), A
3E 82 6F CB 15 CB 15 02
  @check {
    [C104] 09
  }
}

# Tests CB16
@test {
# LD (HL), n (n = 82)
# RL (HL)
# LD (BC), A
36 82 CB 16 02
  @check {
    [C104] 04
  }
}


# Tests CB16
@test {
# LD (HL), n (n = 82)
# RL (HL) 
# RL (HL) # to see if a 1 pops back in from the right again.
# LD (BC), A
36 82 CB 16 CB 16 02
  @check {
    [C104] 09
  }
}

# Tests CB17
@test {
# LD A, #82
# RL A
# LD (HL), A
3E 82 CB 17 77
  @check {
    [C000] 04
  }
}


# Tests CB17
@test {
# LD A, #82
# RL A 
# RL A # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 82 CB 17 CB 17 77
  @check {
    [C000] 09
  }
}


### Testing RR n


# Tests CB18
@test {
# LD A, #81
# LD B, A
# RR B
# LD (HL), A
3E 81 47 CB 18 77
  @check {
    [C000] 40
  }
}


# Tests CB18
@test {
# LD A, #81
# LD B, A
# RR B 
# RR B # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 81 47 CB 18 CB 18 77
  @check {
    [C000] A0
  }
}

# Tests CB19
@test {
# LD A, #81
# LD C, A
# RR C
# LD (HL), A
3E 81 4F CB 19 77
  @check {
    [C000] 40
  }
}


# Tests CB19
@test {
# LD A, #81
# LD C, A
# RR C 
# RR C # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 81 4F CB 19 CB 19 77
  @check {
    [C000] A0
  }
}

# Tests CB1A
@test {
# LD A, #81
# LD D, A
# RR D
# LD (HL), A
3E 81 57 CB 1A 77
  @check {
    [C000] 40
  }
}


# Tests CB1A
@test {
# LD A, #81
# LD D, A
# RR D 
# RR D # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 81 57 CB 1A CB 1A 77
  @check {
    [C000] A0
  }
}

# Tests CB1B
@test {
# LD A, #81
# LD E, A
# RR E
# LD (HL), A
3E 81 5F CB 1B 77
  @check {
    [C000] 40
  }
}


# Tests CB1B
@test {
# LD A, #81
# LD E, A
# RR E 
# RR E # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 81 5F CB 1B CB 1B 77
  @check {
    [C000] A0
  }
}

# Tests CB1C
@test {
# LD A, #81
# LD H, A
# RR H
# LD (BC), A
3E 81 67 CB 1C 02
  @check {
    [C104] 40
  }
}


# Tests CB1C
@test {
# LD A, #81
# LD H, A
# RR H 
# RR H # to see if a 1 pops back in from the right again.
# LD (BC), A
3E 81 67 CB 1C CB 1C 02
  @check {
    [C104] A0
  }
}

# Tests CB1D
@test {
# LD A, #81
# LD L, A
# RR L
# LD (BC), A
3E 81 6F CB 1D 02
  @check {
    [C104] 40
  }
}


# Tests CB1D
@test {
# LD A, #81
# LD L, A
# RR L 
# RR L # to see if a 1 pops back in from the right again.
# LD (BC), A
3E 81 6F CB 1D CB 1D 02
  @check {
    [C104] A0
  }
}

# Tests CB1E
@test {
# LD (HL), n (n = 81)
# RR (HL)
# LD (BC), A
36 81 CB 1E 02
  @check {
    [C104] 40
  }
}


# Tests CB1E
@test {
# LD (HL), n (n = 81)
# RR (HL) 
# RR (HL) # to see if a 1 pops back in from the right again.
# LD (BC), A
36 81 CB 1E CB 1E 02
  @check {
    [C104] A0
  }
}

# Tests CB1F
@test {
# LD A, #81
# RR A
# LD (HL), A
3E 81 CB 1F 77
  @check {
    [C000] 40
  }
}


# Tests CB1F
@test {
# LD A, #81
# RR A 
# RR A # to see if a 1 pops back in from the right again.
# LD (HL), A
3E 81 CB 1F CB 1F 77
  @check {
    [C000] A0
  }
}


### Testing SLA n

# Tests CB20
@test {
# LD A, #82
# LD B, A
# SLA B
# ADC A, B - 03+04+carry(=1) = 08 # tests if carry is set
# LD (HL), A
3E 82 47 CB 20 88 77
  @check {
    [C000] 08
  }
}


# Tests CB21
@test {
# LD A, #82
# LD C, A
# SLA C
# ADC A, C - 03+04+carry(=1) = 08 # tests if carry is set
# LD (HL), A
3E 82 4F CB 21 89 77
  @check {
    [C000] 08
  }
}

# Tests CB22
@test {
# LD A, #82
# LD D, A
# SLA D
# ADC A, D - 03+04+carry(=1) = 08 # tests if carry is set
# LD (HL), A
3E 82 57 CB 22 8A 77
  @check {
    [C000] 08
  }
}

# Tests CB23
@test {
# LD A, #82
# LD E, A
# SLA E
# ADC A, E - 03+04+carry(=1) = 08 # tests if carry is set
# LD (HL), A
3E 82 5F CB 23 8B 77
  @check {
    [C000] 08
  }
}

# Tests CB24
@test {
# LD A, #82
# LD H, A
# SLA H
# ADC A, H - 03+04+carry(=1) = 08 # tests if carry is set
# LD (BC), A
3E 82 67 CB 24 8C 02
  @check {
    [C104] 08
  }
}

# Tests CB25
@test {
# LD A, #82
# LD L, A
# SLA L
# ADC A, L - 03+04+carry(=1) = 08 # tests if carry is set
# LD (BC), A
3E 82 6F CB 25 8D 02
  @check {
    [C104] 08
  }
}

# Tests CB26
@test {
# LD (HL), n (n = 82)
# SLA (HL)
# LD A, (HL)
# ADC A, A - 03+03+carry(=1) = 07 # tests if carry is set
# LD (BC), A
36 82 CB 26 7E 8F 02
  @check {
    [C104] 07
  }
}

# Tests CB27
@test {
# LD A, #82
# SLA A
# ADC A, A - 03+03+carry(=1) = 07 # tests if carry is set
# LD (HL), A
3E 82 CB 27 8F 77
  @check {
    [C000] 07
  }
}


### Testing SRA n

# Tests CB28
@test {
# LD A, #89
# LD B, A
# SRA B
# ADC A, B - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (HL), A
3E 89 47 CB 28 88 77
  @check {
    [C000] C8
  }
}


# Tests CB29
@test {
# LD A, #89
# LD C, A
# SRA C
# ADC A, C - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (HL), A
3E 89 4F CB 29 89 77
  @check {
    [C000] C8
  }
}

# Tests CB2A
@test {
# LD A, #89
# LD D, A
# SRA D
# ADC A, D - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (HL), A
3E 89 57 CB 2A 8A 77
  @check {
    [C000] C8
  }
}

# Tests CB2B
@test {
# LD A, #89
# LD E, A
# SRA E
# ADC A, E - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (HL), A
3E 89 5F CB 2B 8B 77
  @check {
    [C000] C8
  }
}

# Tests CB2C
@test {
# LD A, #89
# LD H, A
# SRA H
# ADC A, H - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (BC), A
3E 89 67 CB 2C 8C 02
  @check {
    [C104] C8
  }
}

# Tests CB2D
@test {
# LD A, #89
# LD L, A
# SRA L
# ADC A, L - 03+C4+carry(=1) = C8 # tests if carry is set
# LD (BC), A
3E 89 6F CB 2D 8D 02
  @check {
    [C104] C8
  }
}

# Tests CB2E
@test {
# LD (HL), n (n = 89)
# SRA (HL)
# LD A, (HL)
# ADC A, A - C4+C4+carry(=1) = 89 # tests if carry is set
# LD (BC), A
36 89 CB 2E 7E 8F 02
  @check {
    [C104] 89
  }
}

# Tests CB2F
@test {
# LD A, #89
# SRA A
# ADC A, A - C4+C4+carry(=1) = 89 # tests if carry is set
# LD (HL), A
3E 89 CB 2F 8F 77
  @check {
    [C000] 89
  }
} 

### Testing SWAP n
## swaps the highest and lowest nibles
# Z=1 if result is 0 -> that is if 00 is swaped

# Tests CB30
# Tests only the side effect that swap 00 should set to Z.
@test {
# LD A, #00
# LD B, A
# SWAP B
# JP Z,nn (nn = 00 C2)
# LD A, B
# LD (HL), A
3E 00 47 CB 30 CA 78 77
  @check {
    [C000] 20
  }
} 

# Tests CB30
@test {
# LD A, #80
# LD B, A
# SWAP B
# LD A, B
# LD (HL), A
3E 80 47 CB 30 78 77
  @check {
    [C000] 01
  }
} 

# Tests CB31
@test {
# LD A, #80
# LD C, A
# SWAP C
# LD A, C
# LD (HL), A
3E 80 4F CB 31 79 77
  @check {
    [C000] 01
  }
}
 
# Tests CB32
@test {
# LD A, #80
# LD D, A
# SWAP D
# LD A, D
# LD (HL), A
3E 80 57 CB 32 7A 77
  @check {
    [C000] 01
  }
} 

# Tests CB33
@test {
# LD A, #80
# LD E, A
# SWAP E
# LD A, E
# LD (HL), A
3E 80 5F CB 33 7B 77
  @check {
    [C000] 01
  }
} 

# Tests CB34
@test {
# LD A, #80
# LD H, A
# SWAP H
# LD A, H
# LD (BC), A
3E 80 67 CB 34 7C 02
  @check {
    [C104] 01
  }
} 

# Tests CB35
@test {
# LD A, #80
# LD L, A
# SWAP L
# LD A, L
# LD (BC), A
3E 80 6F CB 35 7D 02
  @check {
    [C104] 01
  }
} 

# Tests CB36
@test {
# LD (HL), n (n = 71)
# SWAP (HL)
36 71 CB 36
  @check {
    [C000] F0
  }
} 

# Tests CB37
@test {
# LD A, #01
# SWAP A
# LD (HL), A
3E 01 CB 37 77
  @check {
    [C000] 80
  }
} 

### Testing SRL n
## shift to right, MSB set to 0

# Tests CB38
@test {
# LD A, #AB
# LD B, A
# SRL B
# ADC A, B - 03+55+carry(=1) = 59 # tests if carry is set
# LD (HL), A
3E AB 47 CB 28 88 77
  @check {
    [C000] 59
  }
}


# Tests CB39
@test {
# LD A, #AB
# LD C, A
# SRL C
# ADC A, C - 03+55+carry(=1) = 59 # tests if carry is set
# LD (HL), A
3E AB 4F CB 29 89 77
  @check {
    [C000] 59
  }
}

# Tests CB3A
@test {
# LD A, #AB
# LD D, A
# SRL D
# ADC A, D - 03+55+carry(=1) = 59 # tests if carry is set
# LD (HL), A
3E AB 57 CB 2A 8A 77
  @check {
    [C000] 59
  }
}

# Tests CB3B
@test {
# LD A, #AB
# LD E, A
# SRL E
# ADC A, E - 03+55+carry(=1) = 59 # tests if carry is set
# LD (HL), A
3E AB 5F CB 2B 8B 77
  @check {
    [C000] 59
  }
}

# Tests CB3C
@test {
# LD A, #AB
# LD H, A
# SRL H
# ADC A, H - 03+55+carry(=1) = 59 # tests if carry is set
# LD (BC), A
3E AB 67 CB 2C 8C 02
  @check {
    [C104] 59
  }
}

# Tests CB3D
@test {
# LD A, #AB
# LD L, A
# SRL L
# ADC A, L - 03+55+carry(=1) = 59 # tests if carry is set
# LD (BC), A
3E AB 6F CB 2D 8D 02
  @check {
    [C104] 59
  }
}

# Tests CB3E
@test {
# LD (HL), n (n = AB)
# SRL (HL)
# LD A, (HL)
# ADC A, A - 55+55+carry(=1) = AB # tests if carry is set
# LD (BC), A
36 AB CB 2E 7E 8F 02
  @check {
    [C104] AB
  }
}

# Tests CB3F
@test {
# LD A, #AB
# SRL A
# ADC A, A - 55+55+carry(=1) = AB # tests if carry is set
# LD (HL), A
3E AB CB 2F 8F 77
  @check {
    [C000] AB
  }
} 
