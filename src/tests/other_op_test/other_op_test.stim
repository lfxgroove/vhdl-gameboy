--Copyright (c) 2013, Filip Strömbäck, Anton Sundblad, Alex Telon
--All rights reserved.

--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are met:
--    * Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--    * Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in the
--      documentation and/or other materials provided with the distribution.
--    * The names of the contributors may not be used to endorse or promote products
--      derived from this software without specific prior written permission.

--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
--ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
--WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
--DISCLAIMED. IN NO EVENT SHALL FILIP STRÖMBÄCK, ANTON SUNDBLAD OR ALEX TELON 
--BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
--CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
--SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
--INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
--STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
--OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@prepare {
# Set HL to adress X"C000"
# LD A, #C0
# LD H, A
3E C0 67
# LD A, #00
# LD L, A
3E 00 6F

# Set BC to adress X"C104"
# LD A, #C1
# LD B, A
3E C1 47
# LD A, #04
# LD C, A
3E 04 4F

# Set DE to adress X"C208"
# LD A, #C2
# LD D, A
3E C2 57
# LD A, #08
# LD E, A
3E 08 5F

# LD A, #03
3E 03

# default data 
[C000] FF AA
## OBS REMEMBER THAT THIS MUST NOT BE TOO LONG AS TO GO INTO C208 SPACE
[C200] 3E 20 77 76
[C104] EE
[C208] DD
}

# Testing 76
# Test number: 1
@test { 
# DI
# HALT
# LD A, #10
# LD (HL), A
F3 76 3E 10
  @check {
    [C000] FF
  }
}
### Testing SET

# Testing CBC0
# Test number: 2
@test { 
# LD B, #00
# SET 0, B - CB C0
# SET 1, B - CB C8
# SET 2, B - CB D0
# SET 3, B - CB D8
# SET 4, B - CB E0
# SET 5, B - CB E8
# SET 6, B - CB F0
# SET 7, B - CB F8
# LD A, B
# LD (DE), A
06 00 CB C0 CB C8 CB D0 CB D8 CB E0 CB E8 CB F0 CB F8 78 12
  @check {
    [C208] FF
  }
}

# Testing CBC1
# Test number: 3
@test { 
# LD C, #00
# SET 0, C - CB C1
# SET 1, C - CB C9
# SET 2, C - CB D1
# SET 3, C - CB D9
# SET 4, C - CB E1
# SET 5, C - CB E9
# SET 6, C - CB F1
# SET 7, C - CB F9
# LD A, C
# LD (DE), A
0E 00 CB C1 CB C9 CB D1 CB D9 CB E1 CB E9 CB F1 CB F9 79 12
  @check {
    [C208] FF
  }
}

# Testing CBC2
# Test number: 4
@test { 
# LD D, #00
# SET 0, D - CB C2
# SET 1, D - CB CA
# SET 2, D - CB D2
# SET 3, D - CB DA
# SET 4, D - CB E2
# SET 5, D - CB EA
# SET 6, D - CB F2
# SET 7, D - CB FA
# LD A, D
# LD (BC), A
16 00 CB C2 CB CA CB D2 CB DA CB E2 CB EA CB F2 CB FA 7A 02
  @check {
    [C104] FF
  }
}

# Testing CBC3
# Test number: 5
@test { 
# LD E, #00
# SET 0, E - CB C3
# SET 1, E - CB CB
# SET 2, E - CB D3
# SET 3, E - CB DB
# SET 4, E - CB E3
# SET 5, E - CB EB
# SET 6, E - CB F3
# SET 7, E - CB FB
# LD A, E
# LD (BC), A
1E 00 CB C3 CB CB CB D3 CB DB CB E3 CB EB CB F3 CB FB 7B 02
  @check {
    [C104] FF
  }
}

# Testing CBC4
# Test number: 6
@test { 
# LD H, #00
# SET 0, H - CB C4
# SET 1, H - CB CC
# SET 2, H - CB D4
# SET 3, H - CB DC
# SET 4, H - CB E4
# SET 5, H - CB EC
# SET 6, H - CB F4
# SET 7, H - CB FC
# LD A, H
# LD (BC), A
1E 00 CB C4 CB CC CB D4 CB DC CB E4 CB EC CB F4 CB FC 7C 02
  @check {
    [C104] FF
  }
}

# Testing CBC5
# Test number: 7
@test { 
# LD L, #00
# SET 0, L - CB C5
# SET 1, L - CB CD
# SET 2, L - CB D5
# SET 3, L - CB DD
# SET 4, L - CB E5
# SET 5, L - CB ED
# SET 6, L - CB F5
# SET 7, L - CB FD
# LD A, L
# LD (BC), A
26 00 CB C5 CB CD CB D5 CB DD CB E5 CB ED CB F5 CB FD 7D 02
  @check {
    [C104] FF
  }
}

# Testing CBC6
# Test number: 8
@test { 
# LD (HL), n (n = 00)
# SET 0, (HL) - CB C6
# SET 1, (HL) - CB CE
# SET 2, (HL) - CB D6
# SET 3, (HL) - CB DE
# SET 4, (HL) - CB E6
# SET 5, (HL) - CB EE
# SET 6, (HL) - CB F6
# SET 7, (HL) - CB FE
# LD A, (HL)
# LD (BC), A
36 00 CB C6 CB CE CB D6 CB DE CB E6 CB EE CB F6 CB FE 7E 02
  @check {
    [C104] FF
  }
}

# Testing CBC7
# Test number: 9
@test { 
# LD A, #00
# SET 0, A - CB C7
# SET 1, A - CB CF
# SET 2, A - CB D7
# SET 3, A - CB DF
# SET 4, A - CB E7
# SET 5, A - CB EF
# SET 6, A - CB F7
# SET 7, A - CB FF
# LD (BC), A
3E 00 CB C7 CB CF CB D7 CB DF CB E7 CB EF CB F7 CB FF 02
  @check {
    [C104] FF
  }
}


### Testing RES

# Testing CB80
# Test number: 10
@test { 
# LD B, #FF
# RES 0, B - CB 80
# RES 1, B - CB 88
# RES 2, B - CB 90
# RES 3, B - CB 98
# RES 4, B - CB A0
# RES 5, B - CB A8
# RES 6, B - CB B0
# RES 7, B - CB B8
# LD A, B
# LD (DE), A
06 FF CB 80 CB 88 CB 90 CB 98 CB A0 CB A8 CB B0 CB B8 78 12
  @check {
    [C208] 00
  }
}

# Testing CB81
# Test number: 11
@test { 
# LD C, #FF
# RES 0, C - CB 81
# RES 1, C - CB 89
# RES 2, C - CB 91
# RES 3, C - CB 99
# RES 4, C - CB A1
# RES 5, C - CB A9
# RES 6, C - CB B1
# RES 7, C - CB B9
# LD A, C
# LD (DE), A
0E FF CB 81 CB 89 CB 91 CB 99 CB A1 CB A9 CB B1 CB B9 79 12
  @check {
    [C208] 00
  }
}

# Testing CB82
# Test number: 12
@test { 
# LD D, #FF
# RES 0, D - CB 82
# RES 1, D - CB 8A
# RES 2, D - CB 92
# RES 3, D - CB 9A
# RES 4, D - CB A2
# RES 5, D - CB AA
# RES 6, D - CB B2
# RES 7, D - CB BA
# LD A, D
# LD (BC), A
16 FF CB 82 CB 8A CB 92 CB 9A CB A2 CB AA CB B2 CB BA 7A 02
  @check {
    [C104] 00
  }
}

# Testing CB83
# Test number: 13
@test { 
# LD E, #FF
# RES 0, E - CB 83
# RES 1, E - CB 8B
# RES 2, E - CB 93
# RES 3, E - CB 9B
# RES 4, E - CB A3
# RES 5, E - CB AB
# RES 6, E - CB B3
# RES 7, E - CB BB
# LD A, E
# LD (BC), A
1E FF CB 83 CB 8B CB 93 CB 9B CB A3 CB AB CB B3 CB BB 7B 02
  @check {
    [C104] 00
  }
}

# Testing CB84
# Test number: 14
@test { 
# LD H, #FF
# RES 0, H - CB 84
# RES 1, H - CB 8C
# RES 2, H - CB 94
# RES 3, H - CB 9C
# RES 4, H - CB A4
# RES 5, H - CB AC
# RES 6, H - CB B4
# RES 7, H - CB BC
# LD A, H
# LD (BC), A
1E FF CB 84 CB 8C CB 94 CB 9C CB A4 CB AC CB B4 CB BC 7C 02
  @check {
    [C104] 00
  }
}

# Testing CB85
# Test number: 15
@test { 
# LD L, #FF
# RES 0, L - CB 85
# RES 1, L - CB 8D
# RES 2, L - CB 95
# RES 3, L - CB 9D
# RES 4, L - CB A5
# RES 5, L - CB AD
# RES 6, L - CB B5
# RES 7, L - CB BD
# LD A, L
# LD (BC), A
26 FF CB 85 CB 8D CB 95 CB 9D CB A5 CB AD CB B5 CB BD 7D 02
  @check {
    [C104] 00
  }
}

# Testing CB86
# Test number: 16
@test { 
# LD (HL), n (n = FF)
# RES 0, (HL) - CB 86
# RES 1, (HL) - CB 8E
# RES 2, (HL) - CB 96
# RES 3, (HL) - CB 9E
# RES 4, (HL) - CB A6
# RES 5, (HL) - CB AE
# RES 6, (HL) - CB B6
# RES 7, (HL) - CB BE
# LD A, (HL)
# LD (BC), A
36 FF CB 86 CB 8E CB 96 CB 9E CB A6 CB AE CB B6 CB BE 7E 02
  @check {
    [C104] 00
  }
}

# Testing CB87
# Test number: 17
@test { 
# LD A, #FF
# RES 0, A - CB 87
# RES 1, A - CB 8F
# RES 2, A - CB 97
# RES 3, A - CB 9F
# RES 4, A - CB A7
# RES 5, A - CB AF
# RES 6, A - CB B7
# RES 7, A - CB BF
# LD (BC), A
3E FF CB 87 CB 8F CB 97 CB 9F CB A7 CB AF CB B7 CB BF 02
  @check {
    [C104] 00
  }
}
### From here on out all tests would need extra time to pass 

### Testing BIT

# Testing CB40
# Test number: 18
@test { 
# LD B, #FF
# BIT 0, B - CB 40
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, B - CB 48
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, B - CB 50
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, B - CB 58
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, B - CB 60
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, B - CB 68
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, B - CB 70
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, B - CB 78
# LD A, B
# LD (DE), A
06 FF 
CB 40 CA 00 C2
CB 48 CA 00 C2
CB 50 CA 00 C2
CB 58 CA 00 C2
CB 60 CA 00 C2
CB 68 CA 00 C2
# CB 70 CA 00 C2
# CB 78 CA 00 C2
78 12
  @check {
    [C208] FF
  }
}

# Testing CB40 
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 19
@test { 
# LD E, #00
# LD B, #00
# BIT 0, B - CB 40 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, B - CB 48 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, B - CB 50 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, B - CB 58 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, B - CB 60 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, B - CB 68 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, B - CB 70 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, B - CB 78 # gives Z=1
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 06 00
CB 40 28 01 1C
CB 48 28 01 1C
CB 50 28 01 1C
CB 58 28 01 1C
CB 60 28 01 1C
# CB 68 28 01 1C
# CB 70 28 01 1C
# CB 78 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}

# Testing CB41
# Test number: 20
@test { 
# LD C, #FF
# BIT 0, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, C
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, C
# LD A, C
# LD (DE), A
0E FF 
CB 41 CA 00 C2
CB 49 CA 00 C2
CB 51 CA 00 C2
CB 59 CA 00 C2
CB 61 CA 00 C2
CB 69 CA 00 C2
CB 71 CA 00 C2
CB 79 CA 00 C2
79 12
  @check {
    [C208] FF
  }
}

# Testing CB41
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 21
@test { 
# LD E, #00
# LD C, #00
# BIT 0, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, C
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 0E 00
CB 41 28 01 1C
CB 49 28 01 1C
CB 51 28 01 1C
CB 59 28 01 1C
CB 61 28 01 1C
CB 69 28 01 1C
CB 71 28 01 1C
CB 79 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}


# Testing CB42
# Test number: 22
@test { 
# LD D, #FF
# BIT 0, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, D
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, D
# LD A, D
# LD (BC), A
16 FF 
CB 42 CA 00 C2
CB 4A CA 00 C2
CB 52 CA 00 C2
CB 5A CA 00 C2
CB 62 CA 00 C2
CB 6A CA 00 C2
CB 72 CA 00 C2
CB 7A CA 00 C2
7A 02
  @check {
    [C104] FF
  }
}

# Testing CB42
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 23
@test { 
# LD E, #00
# LD D, #00
# BIT 0, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, D
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 16 00
CB 42 28 01 1C
CB 4A 28 01 1C
CB 52 28 01 1C
CB 5A 28 01 1C
CB 62 28 01 1C
CB 6A 28 01 1C
CB 72 28 01 1C
CB 7A 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}


# Testing CB43
# Test number: 24
@test { 
# LD E, #FF
# BIT 0, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, E
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, E
# LD A, E
# LD (BC), A
1E FF 
CB 43 CA 00 C2
CB 4B CA 00 C2
CB 53 CA 00 C2
CB 5B CA 00 C2
CB 63 CA 00 C2
CB 6B CA 00 C2
CB 73 CA 00 C2
CB 7B CA 00 C2
7B 02
  @check {
    [C104] FF
  }
}

# Testing CB43
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 25
@test { 
# LD E, #00
# BIT 0, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, E
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00
CB 43 28 01 1C
CB 4B 28 01 1C
CB 53 28 01 1C
CB 5B 28 01 1C
CB 63 28 01 1C
CB 6B 28 01 1C
CB 73 28 01 1C
CB 7B 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}


# Testing CB44
# Test number: 26
@test { 
# LD H, #FF
# BIT 0, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, H
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, H
# LD A, H
# LD (BC), A
26 FF 
CB 44 CA 00 C2
CB 4C CA 00 C2
CB 54 CA 00 C2
CB 5C CA 00 C2
CB 64 CA 00 C2
CB 6C CA 00 C2
CB 74 CA 00 C2
CB 7C CA 00 C2
7C 02
  @check {
    [C104] FF
  }
}

# Testing CB44
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 27
@test { 
# LD E, #00
# LD H, #00
# BIT 0, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, H
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 26 00
CB 44 28 01 1C
CB 4C 28 01 1C
CB 54 28 01 1C
CB 5C 28 01 1C
CB 64 28 01 1C
CB 6C 28 01 1C
CB 74 28 01 1C
CB 7C 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}


# Testing CB45
# Test number: 28
@test { 
# LD L, #FF
# BIT 0, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, L
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, L
# LD A, L
# LD (BC), A
1E FF 
CB 45 CA 00 C2
CB 4D CA 00 C2
CB 55 CA 00 C2
CB 5D CA 00 C2
CB 65 CA 00 C2
CB 6D CA 00 C2
CB 75 CA 00 C2
CB 7D CA 00 C2
7D 02
  @check {
    [C104] FF
  }
}

# Testing CB45
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 29
@test { 
# LD E, #00
# LD L, #00
# BIT 0, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, L
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 2E 00
CB 45 28 01 1C
CB 4D 28 01 1C
CB 55 28 01 1C
CB 5D 28 01 1C
CB 65 28 01 1C
CB 6D 28 01 1C
CB 75 28 01 1C
CB 7D 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}

##
# Testing CB46
# Test number: 30
@test { 
# LD (HL), #FF
# BIT 0, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, (HL)
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, (HL)
36 FF 
CB 46 CA 00 C2
CB 4E CA 00 C2
CB 56 CA 00 C2
CB 5E CA 00 C2
CB 66 CA 00 C2
CB 6E CA 00 C2
CB 76 CA 00 C2
CB 7E CA 00 C2
  @check {
    [C104] FF
  }
}

# Testing CB46
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 31
@test { 
# LD E, #00
# LD (HL), #00
# BIT 0, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, (HL)
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 36 00
CB 46 28 01 1C
CB 4E 28 01 1C
CB 56 28 01 1C
CB 5E 28 01 1C
CB 66 28 01 1C
CB 6E 28 01 1C
CB 76 28 01 1C
CB 7E 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}

# Testing CB47
# Test number: 32
@test { 
# LD A, #FF
# BIT 0, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 1, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 2, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 3, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 4, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 5, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 6, A
# JP Z,nn (nn = 00 C2) # jumps if z=1 which it should not be
# BIT 7, A
# LD (BC), A
3E FF 
CB 47 CA 00 C2
CB 4F CA 00 C2
CB 57 CA 00 C2
CB 5F CA 00 C2
CB 67 CA 00 C2
CB 6F CA 00 C2
CB 77 CA 00 C2
CB 7F CA 00 C2
02
  @check {
    [C104] FF
  }
}

# Testing CB47
# idea, every bit that sets Z should NOT increment E and then
# check in the end if E was incremented. 

# Test number: 33
@test { 
# LD E, #00
# LD A, #00
# BIT 0, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 1, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 2, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 3, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 4, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 5, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 6, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# BIT 7, A
# JR Z,n (nn = 01) # jumps over the inc instrution if Z=1
# INC E # This should never happen
# LD A, E
# LD (HL), A
1E 00 3E 00
CB 47 28 01 1C
CB 4F 28 01 1C
CB 57 28 01 1C
CB 5F 28 01 1C
CB 67 28 01 1C
CB 6F 28 01 1C
CB 77 28 01 1C
CB 7F 28 01 1C
7B 77
  @check {
    [C000] 00
  }
}


